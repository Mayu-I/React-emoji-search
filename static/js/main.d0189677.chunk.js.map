{"version":3,"sources":["Header.js","SearchInput.js","EmojiResultRow.js","EmojiResults.js","filterEmoji.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","width","height","PureComponent","SearchInput","handleChange","event","props","textChange","onChange","this","EmojiResultsRow","codePointHex","symbol","codePointAt","toString","data-clipboard-text","title","EmojiResults","clipboard","Clipboard","destroy","emojiData","map","key","filterEmoji","searchText","maxResults","emojiList","filter","emoji","toLowerCase","includes","keywords","slice","App","handleSearchChange","setState","filteredEmoji","target","value","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8xsKAGqBA,G,6KAEb,OACI,4BAAQC,UAAU,oBACd,yBACIC,IAAI,mDACJC,IAAI,GACJC,MAAM,KACNC,OAAO,OALf,eAOI,yBACIH,IAAI,mDACJC,IAAI,GACJC,MAAM,KACNC,OAAO,Y,GAdSC,kBCEfC,G,kNAKjBC,aAAe,SAAAC,GACX,EAAKC,MAAMC,WAAWF,I,uDAItB,OACI,yBAAKR,UAAU,0BACX,6BACI,2BAAOW,SAAUC,KAAKL,qB,GAbDF,kB,gBCDpBQ,G,6KAOb,IAAMC,EAAeF,KAAKH,MAAMM,OAAOC,YAAY,GAAGC,SAAS,IACzDhB,EAAG,iDAA6Ca,EAA7C,QACT,OACI,yBACId,UAAU,+CACVkB,sBAAqBN,KAAKH,MAAMM,QAEhC,yBAAKd,IAAKA,EAAKC,IAAKU,KAAKH,MAAMU,QAC/B,0BAAMnB,UAAU,SAASY,KAAKH,MAAMU,OACpC,0BAAMnB,UAAU,QAAhB,4B,GAhB6BK,kBCGxBe,G,wLAMbR,KAAKS,UAAY,IAAIC,IAAU,wB,6CAI/BV,KAAKS,UAAUE,Y,+BAIf,OACI,yBAAKvB,UAAU,2BACVY,KAAKH,MAAMe,UAAUC,KAAI,SAAAD,GAAS,OAC/B,kBAAC,EAAD,CACIE,IAAKF,EAAUL,MACfJ,OAAQS,EAAUT,OAClBI,MAAOK,EAAUL,gB,GApBCd,kB,OCL3B,SAASsB,EAAYC,EAAYC,GAC5C,OAAOC,EACFC,QAAO,SAAAC,GACJ,QAAIA,EAAMb,MAAMc,cAAcC,SAASN,EAAWK,kBAG9CD,EAAMG,SAASD,SAASN,MAK/BQ,MAAM,EAAGP,G,UCNGQ,E,kDACnB,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IAMR6B,mBAAqB,SAAA9B,GACnB,EAAK+B,SAAS,CACZC,cAAeb,EAAYnB,EAAMiC,OAAOC,MAAO,OAPjD,EAAKC,MAAQ,CACXH,cAAeb,EAAY,GAAI,KAHhB,E,qDAcjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAajB,WAAYE,KAAK0B,qBAC9B,kBAAC,EAAD,CAAcd,UAAWZ,KAAK+B,MAAMH,qB,GAnBXnC,iBCKbuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0189677.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport \"./Header.css\";\n\nexport default class Header extends PureComponent {\n    render() {\n        return (\n            <header className=\"component-header\">\n                <img\n                    src=\"//cdn.jsdelivr.net/emojione/assets/png/1f638.png\"\n                    alt=\"\"\n                    width=\"32\"\n                    height=\"32\" />\n                Emoji Search\n                <img\n                    src=\"//cdn.jsdelivr.net/emojione/assets/png/1f63a.png\"\n                    alt=\"\"\n                    width=\"32\"\n                    height=\"32\" />\n            </header>\n        );\n    }\n}","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./SearchInput.css\";\n\nexport default class SearchInput extends PureComponent {\n    static propTypes = {\n        textChange: PropTypes.func\n    };\n\n    handleChange = event => {\n        this.props.textChange(event);\n    };\n\n    render() {\n        return (\n            <div className=\"component-search-input\">\n                <div>\n                    <input onChange={this.handleChange} />\n                </div>\n            </div>\n        );\n    }\n}","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./EmojiResultRow.css\";\n\nexport default class EmojiResultsRow extends PureComponent {\n    static propTypes = {\n        title: PropTypes.string,\n        symbol: PropTypes.string\n    };\n\n    render() {\n        const codePointHex = this.props.symbol.codePointAt(0).toString(16);\n        const src = `//cdn.jsdelivr.net/emojione/assets/png/${codePointHex}.png`;\n        return (\n            <div\n                className=\"component-emoji-result-row copy-to-clipboard\"\n                data-clipboard-text={this.props.symbol}\n            >\n                <img src={src} alt={this.props.title} />\n                <span className=\"title\">{this.props.title}</span>\n                <span className=\"info\">Click to copy emoji</span>\n            </div>\n        );\n    }\n}","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Clipboard from \"clipboard\";\n\nimport EmojiResultRow from \"./EmojiResultRow\";\nimport \"./EmojiResults.css\";\n\nexport default class EmojiResults extends PureComponent {\n    static propTypes = {\n        emojiData: PropTypes.array\n    };\n\n    componentDidMount() {\n        this.clipboard = new Clipboard(\".copy-to-clipboard\");\n    }\n\n    componentWillUnmount() {\n        this.clipboard.destroy();\n    }\n\n    render() {\n        return (\n            <div className=\"component-emoji-results\">\n                {this.props.emojiData.map(emojiData => (\n                    <EmojiResultRow\n                        key={emojiData.title}\n                        symbol={emojiData.symbol}\n                        title={emojiData.title}\n                    />\n                ))}\n            </div>\n        );\n    }\n}","import emojiList from \"./emojiList.json\";\n\nexport default function filterEmoji(searchText, maxResults) {\n    return emojiList\n        .filter(emoji => {\n            if (emoji.title.toLowerCase().includes(searchText.toLowerCase())) {\n                return true;\n            }\n            if (emoji.keywords.includes(searchText)) {\n                return true;\n            }\n            return false;\n        })\n        .slice(0, maxResults);\n}","import React, { PureComponent } from 'react';\nimport Header from \"./Header\";\nimport SearchInput from \"./SearchInput\";\nimport EmojiResults from \"./EmojiResults\";\nimport filterEmoji from \"./filterEmoji\";\nimport './App.css';\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredEmoji: filterEmoji(\"\", 20)\n    };\n  }\n\n  handleSearchChange = event => {\n    this.setState({\n      filteredEmoji: filterEmoji(event.target.value, 20)\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Header></Header>\n        <SearchInput textChange={this.handleSearchChange}></SearchInput>\n        <EmojiResults emojiData={this.state.filteredEmoji}></EmojiResults>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}